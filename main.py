from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import Config
import logging

# Ø¥Ø¹Ø¯Ø§Ø¯ Ù†Ø¸Ø§Ù… Ø§Ù„ØªØ³Ø¬ÙŠÙ„
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [
            [InlineKeyboardButton("ðŸ”„ Ø±Ø¨Ø· Ø§Ù„Ø­Ø³Ø§Ø¨Ø§Øª", callback_data='connect')],
            [InlineKeyboardButton("ðŸ“Š Ø§Ù„Ø¥Ø­ØµØ§Ø¦ÙŠØ§Øª", callback_data='stats')]
        ]
        # Ø¥Ø°Ø§ ÙƒØ§Ù†Øª Ø§Ù„Ø±Ø³Ø§Ù„Ø© Ù…Ù† /start Ù…Ø¨Ø§Ø´Ø±Ø©
        if update.message:
            await update.message.reply_text(
                "Ø§Ù„Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©:",
                reply_markup=InlineKeyboardMarkup(keyboard)
        # Ø¥Ø°Ø§ ÙƒØ§Ù†Øª Ù…Ù† Ø²Ø± Ø±Ø¬ÙˆØ¹
        else:
            await update.callback_query.edit_message_text(
                "Ø§Ù„Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©:",
                reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"Error in start: {e}")

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == 'connect':
            keyboard = [
                [InlineKeyboardButton("Ø¨ÙŠÙ†Ø§Ù†Ø³", callback_data='binance')],
                [InlineKeyboardButton("ðŸ”™ Ø±Ø¬ÙˆØ¹", callback_data='back')]
            ]
            await query.edit_message_text(
                text="Ø§Ø®ØªØ± Ø§Ù„Ù…Ù†ØµØ©:",
                reply_markup=InlineKeyboardMarkup(keyboard))
                
        elif query.data == 'back':
            # Ø§Ø³ØªØ¯Ø¹Ø§Ø¡ ÙˆØ§Ø¬Ù‡Ø© Ø§Ù„Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ© Ù…Ø¹ ØªØ¹Ø¯ÙŠÙ„ Ø§Ù„Ø±Ø³Ø§Ù„Ø© Ø§Ù„Ø­Ø§Ù„ÙŠØ©
            keyboard = [
                [InlineKeyboardButton("ðŸ”„ Ø±Ø¨Ø· Ø§Ù„Ø­Ø³Ø§Ø¨Ø§Øª", callback_data='connect')],
                [InlineKeyboardButton("ðŸ“Š Ø§Ù„Ø¥Ø­ØµØ§Ø¦ÙŠØ§Øª", callback_data='stats')]
            ]
            await query.edit_message_text(
                text="Ø§Ù„Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©:",
                reply_markup=InlineKeyboardMarkup(keyboard))
                
    except Exception as e:
        logger.error(f"Error in handle_buttons: {e}")

def main():
    try:
        app = Application.builder().token(Config.BOT_TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(handle_buttons))
        
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"Error in main: {e}")

if __name__ == '__main__':
    main()